diff --git a/node_modules/react-flow-renderer/dist/nocss/ReactFlow-nocss.esm.js b/node_modules/react-flow-renderer/dist/nocss/ReactFlow-nocss.esm.js
index bc5be37..812ede3 100644
--- a/node_modules/react-flow-renderer/dist/nocss/ReactFlow-nocss.esm.js
+++ b/node_modules/react-flow-renderer/dist/nocss/ReactFlow-nocss.esm.js
@@ -2735,7 +2735,23 @@ var useKeyPress = (function (keyCode) {
   useEffect(function () {
     if (typeof keyCode !== 'undefined') {
       var downHandler = function downHandler(event) {
-        if (!isInputDOMNode(event) && (event.key === keyCode || event.keyCode === keyCode)) {
+
+        // Because react-flow-renderer adds a global keydown listener and elements in a
+        // diagram can be in a selected state even when the diagram is not in focus, we
+        // add a check to make sure any keydown event is targeting the currently
+        // selected node or edge before allowing it to affect the selected node or edge.
+        // That way if the diagram is a child element of a larger document, keydown
+        // events on elements outside the diagram will not cause unexpected behavior,
+        // such as deleting the currently selected node inside the diagram
+        // when you hit the Delete key while a modal window is open.
+        const activeNode = document.querySelector(".react-flow__node.selected");
+        const activeEdge = document.querySelector(".react-flow__edge.selected");
+        const isSelectedNodeOrEdge = (
+          (activeNode && activeNode.contains(event.target)) ||
+          (activeEdge && activeEdge.contains(event.target))
+        );
+  
+        if (isSelectedNodeOrEdge && !isInputDOMNode(event) && (event.key === keyCode || event.keyCode === keyCode)) {
           event.preventDefault();
           setKeyPressed(true);
         }
