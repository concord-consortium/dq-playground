@import "../../scss/vars.scss";
@import "../../scss/mixins.scss";

// Make sure to update kDefaultNodeWidth and kDefaultNodeHeight in models/dq-node.ts when you change these contants.
$node-width: 194px;
$node-height: 98px;

$node-expression-shown-height: $node-height + 32px;
$node-expanded-expression-shown-height: $node-height + 52px;
$node-inner-width: 164px;
$input-half-width: calc(($node-inner-width/2) - 2px);
$color-gray-dark: #3f3f3f;

.node {
  background: theme-var($--theme-color-5);
  border: 2px solid theme-var($--theme-color-2);
  border-radius: 5px;
  box-sizing: border-box;
  color: $default-fg-color;
  font-family: $default-font-family;
  font-size: 11px;
  height: $node-height;
  transition: height .25s;
  width: $node-width;
  z-index: 4;

  * { box-sizing: border-box; }

  &.blue { @include spread-map($theme-map-blue); }
  &.gray { @include spread-map($theme-map-gray); }
  &.green { @include spread-map($theme-map-green); }
  &.light-gray { @include spread-map($theme-map-light-gray); }
  &.red { @include spread-map($theme-map-red); }
  &.yellow { @include spread-map($theme-map-yellow); }

  &:hover { outline: 2px solid $hover-blue; }
  &.selected {
    cursor: grabbing;
    outline: 2px solid $select-blue;
    &:hover { outline-color: $select-blue; }
  }
  &.expanded {
    height: auto;
    &.expression-shown {
      min-height: $node-expanded-expression-shown-height;
    }
  }
  &.expression-shown {
    min-height: $node-expression-shown-height;

    .expression-row {
      &:after {
        background-image: $input-overflow-gradient;
        content: "";
        display: block;
        height: 100%;
        pointer-events: none;
        position: absolute;
        right: 17px;
        width: 30px;
        z-index: 5;
      }
    }
  }

  select, input {
    background-color: white;
    border: none;
    font-family: $default-font-family;
    line-height: normal;
    padding: 2px 6px;
    resize: none;
  }
  textarea {
    background-color: white;
    border: none;
    font-family: $default-font-family;
    line-height: normal;
    overflow: hidden;
    padding: 3px 6px;
    resize: none;
  }

  .variable-info-container {
    border-radius: 5px;
    display: flex;
    flex-direction: column;
    margin: 12px 12px 0;

    .variable-info-row {
      border-radius: 5px;
      display: flex;
      flex-direction: row;
      gap: 6px;
      height: 26px;
      margin-bottom: 6px;
      position: relative;

      &.name-row { border: solid 2px white; }
      &.value-unit-row {
        margin-bottom: 5px;

        &.expanded {
          align-items: flex-start;
          height: 46px;

          .value-container.expanded, .unit-container.expanded {
            &:after { display: none; }
            button {
              align-items: flex-start;
              height: 46px;
              padding-top: 3px;

              svg { transform: rotate(180deg); }
            }
            textarea {
              height: 46px;
              padding: 3px 20px 3px 21px;
              text-indent: -15px;
              white-space: normal;
            }
          }
        }

        .value-container, .unit-container {
          position: relative;
          &.long:after {
            background: $input-overflow-gradient;
            border-top-right-radius: 5px;
            border-bottom-right-radius: 5px;
            content: "";
            display: block;
            height: 26px;
            pointer-events: none;
            position: absolute;
            right: 20px;
            top: 0;
            width: 30px;
            z-index: 5;
          }

          button {
            align-items: center;
            background-color: white;
            border: none;
            border-top-right-radius: 5px;
            border-bottom-right-radius: 5px;
            cursor: pointer;
            display: flex;
            height: 26px;
            margin: 0;
            padding: 0;
            position: absolute;
            right: 0;
            top: 0;
            width: 20px;
            z-index: 10;
  
            svg {
              transition: .25s;
              .foreground {
                fill: theme-var($--theme-color-1);
                stroke: theme-var($--theme-color-1);
              }
            }
          }
          textarea { white-space: nowrap; }
        }
      }
      &.description-row {
        align-items: center;
        border-radius: 0;
        flex-direction: column;
        height: 20px;
        justify-content: center;
        margin-top: -4px;
        margin-bottom: 0;

        &.expanded {
          border-top: solid 2px theme-var($--theme-color-7);
          height: auto;
          margin-top: 0;
          padding-top: 5px;

          button.variable-description-toggle {
            margin-bottom: 3px;
            padding: 0;
            transform: rotate(180deg);
          }
        }

        button.variable-description-toggle {
          background-color: theme-var($--theme-color-5);
          border: none;
          border-radius: 50%;
          cursor: pointer;
          height: 20px;
          padding: 1px 0 0 0;
          position: relative;
          transition: transform .25s;
          width: 20px;
          z-index: 5;

          &:hover { background-color: theme-var($--theme-color-4); }
          &:active {
            background-color: theme-var($--theme-color-2);
            svg {
              .background {
                fill: theme-var($--theme-color-5);
                stroke: theme-var($--theme-color-5);
              }
              .foreground {
                fill: white;
                stroke: white;
              }
            }
          }

          svg {
            .background {
              fill: theme-var($--theme-color-5);
              stroke: theme-var($--theme-color-5);
            }
            .foreground {
              fill: theme-var($--theme-color-1);
              stroke: theme-var($--theme-color-1);
            }
          }
        }
        .variable-description-area {
          border: none;
          border-radius: 5px;
          font-family: $default-font-family;
          font-size: 14px;
          min-height: 26px;
          overflow-y: scroll;
          padding: 3.5px 6px;
          resize: none;
          width: 100%;

          &::placeholder { color: $color-light-gray-2; }
          &:hover { outline: 2px solid $hover-blue; }
          &:focus { outline: 2px solid $select-blue; }
        }
      }

      &.expression-row {
        &.expanded {
          height: auto;

          .variable-expression-area {
            line-height: normal;
            min-height: 46px;
            overflow-y: scroll;
            padding: 3.5px 40px 3.5px 21px;
            text-indent: -15px;
            white-space: normal;
          }
          button.variable-expression-toggle svg {
            align-self: flex-start;
            margin-top: 3px;
            transform: rotate(180deg);
          }
        }
        button.variable-expression-toggle {
          background-color: white;
          border: none;
          border-top-right-radius: 5px;
          border-bottom-right-radius: 5px;
          cursor: pointer;
          display: flex;
          height: 100%;
          margin: 0;
          padding: 0;
          position: absolute;
          right: 0;
          width: 20px;
          z-index: 10;

          svg {
            align-self: center;
            transition: .25s;
            .foreground {
              fill: theme-var($--theme-color-1);
              stroke: theme-var($--theme-color-1);
            }
          }
        }
        .variable-expression-area {
          background-color: white;
          border: none;
          border-radius: 5px;
          font-family: $default-font-family;
          font-size: 14px;
          height: 26px;
          line-height: 26px;
          overflow: hidden;
          padding: 0 5px 3.5px 6px;
          position: relative;
          resize: none;
          white-space: nowrap;
          width: 100%;

          &:empty:before {
            content: attr(placeholder);
            color: gray;
            font-size: 14px;
            margin: 5px;
          }
          &::placeholder { color: $color-light-gray-2; }
          &:hover { outline: 2px solid $hover-blue; }
          &:focus { outline: 2px solid $select-blue; }
          &.invalid { outline: 2px solid $invalid-red; }
        }
      }

      .variable-info {
        align-items: center;
        border-radius: 5px;
        color: $default-fg-color;
        display: flex;
        font-size: 14px;
        height: 26px;
        text-align: left;
        white-space: nowrap;

        &::placeholder { color: $color-light-gray-2; }
        &:hover { outline: 2px solid $hover-blue; }
        &:focus { outline: 2px solid $select-blue; }
        &.name {
          background-color: theme-var($--theme-color-5);
          border: solid 1px $default-fg-color;
          border-radius: 3px;
          height: 22px;
          padding: 2px 4px;
          width: 100%;
        }
        &.unit { width: $input-half-width; }
        &.value {
          text-align: right;
          width: $input-half-width;
        }
        &.static {
          background-color: theme-var($--theme-color-7);
          padding: 3px 6px;
          &:hover { outline: none; }
        }
        &.no-value { color: gray; }
        &.invalid { outline: 2px solid $invalid-red; }
      }
    }

    .error-icon {
      bottom: 2.5px;
      height: 20px;
      left: 3px;
      position: absolute;
      width: 20px;
    }
    .error-message {
      color: $invalid-red;
      display: inline-block;
      font-size: 12px;
      height: auto;
      left: 0;
      overflow-wrap: normal;
      position: absolute;
      top: 100%;
      width: 100%;

      p { margin: 0; }
    }
  }

  .variable-info-floater {
    bottom: 4px;
    cursor: pointer;
    height: 20px;
    position: absolute;
    right: 4px;
    width: 20px;

    button.color-palette-toggle {
      background: theme-var($--theme-color-5);
      border: none;
      border-radius: 50%;
      cursor: pointer;
      display: block;
      height: 20px;
      margin: 0;
      padding: 0;
      width: 20px;

      &:hover { background-color: theme-var($--theme-color-4); }
      &:active {
        background-color: theme-var($--theme-color-2);
        svg {
          .background {
            fill: theme-var($--theme-color-5);
            stroke: theme-var($--theme-color-5);
          }
          .foreground {
            fill: white;
            stroke: white;
          }
        }
      }

      svg {
        .background {
          fill: theme-var($--theme-color-5);
          stroke: theme-var($--theme-color-5);
        }
        .foreground {
          fill: theme-var($--theme-color-1);
          stroke: theme-var($--theme-color-1);
        }
      }
    }
  }

  // TODO: Find a way to drop use of !important here.
  // React Flow's Handle component doesn't seem to provide a way to set
  // hover and active styling without interfering with its functionality.
  .flow-handle {
    &:hover {
      background-color: $hover-blue !important;
      box-sizing: content-box;
      cursor: pointer;
    }
    &:active {
      background-color: $select-blue !important;
      cursor: grab;
    }
  }

  /* Make scrollbar always visible when active:
   * https://stackoverflow.com/questions/1202425/making-the-main-scrollbar-always-visible
   */
  .variable-description-area::-webkit-scrollbar {
    -webkit-appearance: none;
    width: 7px;
  }
  .variable-description-area::-webkit-scrollbar-thumb {
    border-radius: 4px;
    background-color: rgba(0, 0, 0, .5);
    -webkit-box-shadow: 0 0 1px rgba(255, 255, 255, .5);
  }
}
